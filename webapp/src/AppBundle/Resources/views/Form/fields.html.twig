{% block form_modal_widget %}
    <script>
        var fieldIndex = 0;

        $(function () {
            var dialog, form, tips = $(".validateTips");

            // From http://www.whatwg.org/specs/web-apps/current-work/multipage/states-of-the-type-attribute.html#e-mail-state-%28type=email%29
//                emailRegex = /^[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/,

            var allFields;
            {% for key, value in columns %}
            allFields = $([]).add($({{ key }}));
            {% endfor %}

            function updateTips(t) {
                tips
                        .text(t)
                        .addClass("ui-state-highlight");
                setTimeout(function () {
                    tips.removeClass("ui-state-highlight", 1500);
                }, 500);
            }

            window.checkLength = function (obj) {
                if ($('#' + obj.n).val().length > obj.max || $('#' + obj.n).val().length < obj.min) {
                    $('#' + obj.n).addClass("ui-state-error");
                    updateTips("Length of " + obj.l + " must be between " +
                            obj.min + " and " + obj.max + ".");
                    return false;
                } else {
                    return true;
                }
            };

            window.checkRegexp = function (obj) {
                if (!( obj.regexp.test($('#' + obj.n).val()) )) {
                    $('#' + obj.n).addClass("ui-state-error");
                    updateTips(obj.n);
                    return false;
                } else {
                    return true;
                }
            };

            window.checkChoices = function (obj) {
                var checkArr = [];
                $.each(obj.v, function(i, e) {
                    checkArr.push(i);
                });

                if (!checkArr.includes($('#' + obj.n).val())) {
                    $('#' + obj.n).addClass("ui-state-error");
                    updateTips("Value of " + obj.n + " is invalid.");
                    return false;
                } else {
                    return true;
                }
            };

            var curFields = "";
            // Set the current fields
            {% set fieldIndex = 0 %}
            {% for row in tableData %}
            {% for key, column in row %}
            {% if (column is iterable) %}
            {% set inpKey = column|keys|first %}
            {% endif %}
            curFields += '<input data-key="{{ inpKey }}" type="hidden" name="{{ full_name }}[{{ fieldIndex }}][{{ key }}]" value="{{ column is iterable ? column|keys|first : column }}" />';
            {% endfor %}
            {% set fieldIndex = fieldIndex + 1 %}
            {% endfor %}
            $("#users").after(curFields);

            fieldIndex = {{ fieldIndex }};

            // Add row to table function
            function addUser() {
                var valid = true;
                allFields.removeClass("ui-state-error");


//            valid = valid && checkLength( name, "username", 3, 16 );
//            valid = valid && checkRegexp( name, /^[a-z]([0-9a-z_\s])+$/i, "Username may consist of a-z, 0-9, underscores, spaces and must begin with a letter." );

                var td = "";
                var newFields = "";
                var trKey;
                {% for key, value in validators %}
                valid = valid && doClean("{{ key }}", "{{ value['validator'] }}", JSON.parse('{{  value['args']|raw }}'));

                var val = '';
                var selector = '#' + '{{ key }}';
                if ($(selector).is('input')) {
                    val = $(selector).val();
                } else {
                    val = $(selector + ' option:selected').text();
                    trKey = $(selector + ' option:selected').val();
                }

                td += "<td>" + val + "</td>";

                newFields += '<input data-key=' + trKey + ' type="hidden" name="{{ full_name }}[' + fieldIndex + '][{{ key }}]" value="' + $(selector).val() + '" />';
                {% endfor %}
                // Increase the array index
                fieldIndex = fieldIndex + 1;

                if (valid) {
                    var existTr = $('tr[data-key="' + trKey + '"]');
                    var existInp = $('input[data-key="' + trKey + '"]');
                    // If the row is exist -> replace old element
                    if (existTr.length) {
                        existTr.html(td);
                        existInp.remove();
                    } else {
                        $("#users tbody").append("<tr data-key=" + trKey + ">" + td + "</tr>");
                    }
                    $("#users").after(newFields);

                    dialog.dialog("close");
                }
                return valid;
            }

            function doClean(name, validator, options) {
                options = $.extend({
                    n: name
                }, options);
                return window[validator](options);
            }

            dialog = $("#dialog-form").dialog({
                autoOpen: false,
                height: 400,
                width: 350,
                modal: true,
                buttons: {
                    "Lưu": addUser,
                    "Hủy": function () {
                        dialog.dialog("close");
                    }
                },
                close: function () {
//                form[ 0 ].reset();
                    allFields.removeClass("ui-state-error");
                }
            });

//        form = dialog.find( "form" ).on( "submit", function( event ) {
//            event.preventDefault();
//            addUser();
//        });

            $("#create-user").button().on("click", function () {
                dialog.dialog("open");
            });
        });
    </script>

    <div id="dialog-form" title="Thêm mới">
        <p class="validateTips">All form fields are required.</p>

        {#<form>#}
        <fieldset>
            {% for key, value in columns %}
                {% if value['type'] == 'text' %}
                    <label for="{{ key }}">{{ value['name'] }}</label>
                    <input type="text" name="{{ key }}" id="{{ key }}"
                           class="text ui-widget-content ui-corner-all form-control">
                {% elseif value['type'] == 'choice' %}
                    <label for="{{ key }}">{{ value['name'] }}</label>
                    <select name="{{ key }}" id="{{ key }}" class="text ui-widget-content ui-corner-all">
                        <option>-- Chọn --</option>
                        {% for id, name in value['data'] %}
                            <option value="{{ id }}">{{ name }}</option>
                        {% endfor %}
                    </select>
                {% endif %}
            {% endfor %}

            <!-- Allow form submission with keyboard without duplicating the dialog button -->
            <input type="submit" tabindex="-1" style="position:absolute; top:-1000px">
        </fieldset>
        {#</form>#}
    </div>

    <div id="users-contain" class="ui-widget">
        {#<h1>Danh sách:</h1>#}
        <table id="users" class="table ui-widget ui-widget-content">
            <thead>
            <tr class="ui-widget-header ">
                {% for value in columns %}
                    <th>{{ value['name'] }}</th>
                {% endfor %}
            </tr>
            </thead>
            <tbody>
            {% for rowKey, row in tableData %}
                <tr data-key="{{ rowKey }}">
                    {% for column in row %}
                        <td>{{ column is iterable ? column|first : column }}</td>
                    {% endfor %}
                </tr>
            {% endfor %}
            </tbody>
        </table>
    </div>
    <button id="create-user" type="button" class="btn">Thêm mới</button>
{% endblock %}


{% block multiple_upload_widget %}
    {% if (object_id is not null) %}
        {{ template|raw }}
    {% else %}
        <div><b>* Lưu ý:</b> Lưu để cập nhật ảnh mô tả</div>
    {% endif %}
{% endblock %}
